@using Repositories
@model IEnumerable<Product>

<h2>Product List</h2>

<form method="get" class="mb-3">
    <div class="row mt-3">
        <div class="col-md-6">
            <label for="search" class="form-label">Search by Name/Description</label>
            <input type="text" id="search" name="target" class="form-control" value="@ViewBag.Target" />
        </div>
        <div class="col-md-6">
            <label for="filterStrategy" class="form-label">Search Criteria</label>
            <select id="filterStrategy" name="filterStrategy" class="form-select">
                <option value="" >Select...</option>
                <option value="name" >Name</option>
                <option value="description" >Description</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label for="minPrice" class="form-label">Min Price</label>
            <input type="number" step="0.01" id="minPrice" name="minPrice" class="form-control" value="@ViewBag.MinPrice" />
        </div>
        <div class="col-md-3">
            <label for="maxPrice" class="form-label">Max Price</label>
            <input type="number" step="0.01" id="maxPrice" name="maxPrice" class="form-control" value="@ViewBag.MaxPrice" />
        </div>
        <div class="col-md-3">
            <label for="minQuantity" class="form-label">Min Quantity</label>
            <input type="number" id="minQuantity" name="minQuantity" class="form-control" value="@ViewBag.MinQuantity" />
        </div>
        <div class="col-md-3">
            <label for="maxQuantity" class="form-label">Max Quantity</label>
            <input type="number" id="maxQuantity" name="maxQuantity" class="form-control" value="@ViewBag.MaxQuantity" />
        </div>
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Apply Filters</button>
        <a href="/" class="btn btn-secondary">Clear Filters</a>
    </div>
</form>

<table class="table table-striped table-hover">
    <thead class="table-dark">
        <tr>
            <th scope="col">Product ID</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Price</th>
            <th scope="col">Quantity</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model)
        {
            <tr>
                <th scope="row">@product.Id</th>
                <td>@product.Name</td>
                <td>@product.Description</td>
                <td>@product.Price.ToString("C")</td>
                <td>@product.Quantity</td>
                <td>
                    <button class="btn btn-sm btn-primary edit-product-btn" onclick="onUpdate('@product.Id')">Edit</button>
                    <button onclick="confirmDelete('@product.Id')" class="btn btn-sm btn-danger">Delete</button>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="6">
                <nav>
                    <ul class="pagination justify-content-center">
                        @for (var i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="?page=@i&minPrice=@ViewBag.MinPrice&maxPrice=@ViewBag.MaxPrice&minQuantity=@ViewBag.MinQuantity&maxQuantity=@ViewBag.MaxQuantity">@i</a>
                            </li>
                        }
                    </ul>
                </nav>
            </td>
        </tr>
    </tfoot>
</table>
<!-- Modal -->
@if (ViewBag.UserType == "admin")
{

    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editProductForm">
                        <input type="hidden" id="editProductId" />
                        <div class="mb-3">
                            <label for="editProductName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="editProductName" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editProductDescription" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editProductPrice" class="form-label">Price</label>
                            <input type="number" class="form-control" id="editProductPrice" required />
                        </div>
                        <div class="mb-3">
                            <label for="editProductQuantity" class="form-label">Quantity</label>
                            <input type="number" class="form-control" id="editProductQuantity" required />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveProductChanges">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

}
<script>
    async function confirmDelete(productId) {
        Swal.fire({
            title: 'Eliminar Producto',
            text: 'Esta seguro que desea eliminar este producto?',
            icon: 'warning',
            confirmButtonText: 'Confirmar',
            cancelButtonText: 'Cancelar',
            showCancelButton:true,
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`https://localhost:7017/Products/Delete/${productId}`, {
                        method: 'DELETE',

                    });
                    if (response.ok) {
                        Swal.fire({
                            title: 'Producto Eliminado con Exito.',
                            icon: 'success',
                            confirmButtonText: 'Ententido'
                        }).then((result) => {
                            console.log(result);
                            window.location.reload();
                        })
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Error eliminando el producto, intentalo nuevamente.',
                            icon: 'error',
                            confirmButtonText: 'Ok'
                        });
                    }
                } catch (error) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error eliminando el producto, intentalo nuevamente.',
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    })
                }
            } 
        })
    }


    async function onUpdate(productId) {
        // Realiza una solicitud para obtener los detalles del producto
        fetch(`/Products/GetProductById/${productId}`)
            .then((response) => response.json())
            .then((product) => {
                console.log('PRoduct response: ',product);

                // Llena el formulario con los datos del producto
                document.getElementById("editProductId").value = product.id;
                document.getElementById("editProductName").value = product.name;
                document.getElementById("editProductDescription").value = product.description;
                document.getElementById("editProductPrice").value = product.price;
                document.getElementById("editProductQuantity").value = product.quantity;

                // Muestra el modal
                const modal = new bootstrap.Modal(document.getElementById("editProductModal"));
                modal.show();
            })
            .catch((error) => Swal.fire({
                title: 'Error!',
                text: 'Error solicitando el producto.' + error,
                icon: 'error',
                confirmButtonText: 'Ok'
            }));
    }

    // Enviar los cambios al servidor
    document.getElementById("saveProductChanges").addEventListener("click", () => {
        const productId = document.getElementById("editProductId").value;
        const updatedProduct = {
            id: productId,
            name: document.getElementById("editProductName").value,
            description: document.getElementById("editProductDescription").value,
            price: parseFloat(document.getElementById("editProductPrice").value),
            quantity: parseInt(document.getElementById("editProductQuantity").value, 10),
        };

        fetch(`/Products/Edit/${productId}`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(updatedProduct),
        })
            .then((response) => {
                if (response.ok) {
                    Swal.fire({
                        title: 'Producto Acutalizado con Exito.',
                        icon: 'success',
                        confirmButtonText: 'Ententido'
                    }).then((result) => {
                        console.log(result);
                        location.reload();
                    })
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Error actualizando el producto.',
                        icon: 'error',
                        confirmButtonText: 'Ok'
                    })
                }
            })
            .catch((error) =>
                Swal.fire({
                    title: 'Error!',
                    text: 'Error actualizando el producto.' + error,
                    icon: 'error',
                    confirmButtonText: 'Ok'
                })
            );
    });


</script>

